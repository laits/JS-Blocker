let i18n = {};
let currentSortAsc = true;
let currentTabDomain = null;

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML-—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è XSS
 * @param {string} str - –°—Ç—Ä–æ–∫–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {string} –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 */
function escapeHtml(str) {
  return str
    .replace(/&/g, '&amp;')
    .replace(/</g, '<')
    .replace(/>/g, '>')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º —Ö–æ—Å—Ç–æ–º (–¥–æ–º–µ–Ω–æ–º –∏–ª–∏ IP-–∞–¥—Ä–µ—Å–æ–º)
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: example.com, sub.example.com, localhost, 192.168.1.1
 * –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: –ø–æ—Ä—Ç—ã, –ø—É—Ç–∏, –ø—Ä–æ—Ç–æ–∫–æ–ª—ã, –∑–≤—ë–∑–¥–æ—á–∫–∏, –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
 */
function isValidHost(host) {
  if (!host || typeof host !== 'string') return false;
  
  const trimmed = host.trim().toLowerCase();
  if (!trimmed || trimmed.length > 253) return false;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ IPv4
  const ipv4Regex = /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/;
  if (ipv4Regex.test(trimmed)) {
    return trimmed.split('.').every(part => {
      const num = parseInt(part, 10);
      return num >= 0 && num <= 255;
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –∏–ª–∏ localhost
  const domainRegex = /^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)*[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?$/;
  return domainRegex.test(trimmed) && trimmed !== '.';
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
 * @param {string[]} blockedList - –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
 */
function updateButtonStates(blockedList) {
  const isEmpty = !blockedList || blockedList.length === 0;
  const clearAllBtn = document.getElementById('clearAllBtn');
  const exportBtn = document.getElementById('exportBtn');
  
  if (clearAllBtn) clearAllBtn.disabled = isEmpty;
  if (exportBtn) exportBtn.disabled = isEmpty;
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —è–∑—ã–∫–æ–≤–æ–π —Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏ `locales`
 * @param {string} lang - –ö–æ–¥ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'ru', 'en')
 */
function loadLanguage(lang = 'ru') {
  fetch(`locales/${lang}.json`)
    .then(response => response.ok ? response.json() : Promise.reject())
    .then(data => {
      i18n = data;
      applyTranslations();
      initializePopup();
    })
    .catch(() => {
      i18n = getFallbackTranslations(lang);
      applyTranslations();
      initializePopup();
    });
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
 * @param {string} lang - –ö–æ–¥ —è–∑—ã–∫–∞
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
 */
function getFallbackTranslations(lang) {
  if (lang === 'en') {
    return {
      title: 'JS Blocker',
      site: 'Site',
      status: 'Status',
      js_blocked: 'Blocked',
      js_allowed: 'Allowed',
      toggle_block: 'Block JS',
      toggle_allow: 'Allow JS',
      toggle_title: 'Toggle JavaScript blocking',
      blocked_sites: 'Blocked sites',
      clear_all: 'Clear all',
      clear_all_title: 'Clear entire blocked list',
      export_title: 'Export blocked domains',
      import_title: 'Import blocked domains',
      sort_title: 'Toggle sort order',
      search_label: 'Search by domain',
      search_help: 'Enter part of a domain to filter the list',
      search_header: 'Search',
      search_placeholder: 'Search domains...',
      sort: 'Sort',
      delete_domain: 'Delete',
      empty_list: 'List is empty',
      confirm_clear_all: 'Clear entire list?',
      export: 'Export',
      import: 'Import',
      import_success: 'Domains imported: {count}',
      import_error: 'Import error:',
      import_error_format: 'Expected an array of domains',
      import_invalid_skipped: 'Skipped invalid entries',
      export_started: 'Export started ‚Äî check save dialog',
      current_site: 'Current site',
      internal_page: 'Not available on browser internal pages',
      lang: 'en'
    };
  }

  return {
    title: '–ë–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫ JS',
    site: '–°–∞–π—Ç',
    status: '–°—Ç–∞—Ç—É—Å',
    js_blocked: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
    js_allowed: '–†–∞–∑—Ä–µ—à—ë–Ω',
    toggle_block: '–û—Ç–∫–ª—é—á–∏—Ç—å JS',
    toggle_allow: '–†–∞–∑—Ä–µ—à–∏—Ç—å JS',
    toggle_title: '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É JavaScript',
    blocked_sites: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∞–π—Ç—ã',
    clear_all: '–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë',
    clear_all_title: '–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤',
    export_title: '–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤',
    import_title: '–ò–º–ø–æ—Ä—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤',
    sort_title: '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏',
    search_label: '–ü–æ–∏—Å–∫ –ø–æ –¥–æ–º–µ–Ω—É',
    search_help: '–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –¥–æ–º–µ–Ω–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞',
    search_header: '–ü–æ–∏—Å–∫',
    search_placeholder: '–ü–æ–∏—Å–∫ –ø–æ –¥–æ–º–µ–Ω–∞–º...',
    sort: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å',
    delete_domain: '–£–¥–∞–ª–∏—Ç—å',
    empty_list: '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç',
    confirm_clear_all: '–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫?',
    export: '–≠–∫—Å–ø–æ—Ä—Ç',
    import: '–ò–º–ø–æ—Ä—Ç',
    import_success: '–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–æ–º–µ–Ω–æ–≤: {count}',
    import_error: '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:',
    import_error_format: '–û–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤ –¥–æ–º–µ–Ω–æ–≤',
    import_invalid_skipped: '–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–∞–ø–∏—Å–µ–π',
    export_started: '–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—á–∞—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–∫–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
    current_site: '–¢–µ–∫—É—â–∏–π —Å–∞–π—Ç',
    internal_page: '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞',
    lang: 'ru'
  };
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –∫–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */
function applyTranslations() {
  document.documentElement.lang = i18n.lang || 'ru';
  document.title = i18n.title || 'JS Blocker';

  const elements = {
    toggleBtn: { text: 'toggle_block', title: 'toggle_title' },
    clearAllBtn: { text: 'clear_all', title: 'clear_all_title' },
    blockedSitesHeader: { text: 'blocked_sites' },
    exportBtn: { text: 'export', title: 'export_title' },
    importBtn: { text: 'import', title: 'import_title' },
    searchHeader: { text: 'search_header' },
    searchInput: { placeholder: 'search_placeholder' },
    sortBtn: { text: 'sort', title: 'sort_title' }
  };

  if (i18n.search_label) {
    const label = document.getElementById('searchLabel');
    if (label) label.textContent = i18n.search_label;
  }
  if (i18n.search_help) {
    const help = document.getElementById('searchHelp');
    if (help) help.textContent = i18n.search_help;
  }

  for (const [id, props] of Object.entries(elements)) {
    const el = document.getElementById(id);
    if (!el) continue;

    if (props.text && i18n[props.text]) {
      el.textContent = i18n[props.text];
    }
    if (props.title && i18n[props.title]) {
      el.title = i18n[props.title];
      el.setAttribute('aria-label', i18n[props.title]);
    }
    if (props.placeholder && i18n[props.placeholder]) {
      el.placeholder = i18n[props.placeholder];
    }
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–º–µ–Ω –∏–∑ URL, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—Ä–∞—É–∑–µ—Ä–∞
 * @param {string} url - URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @returns {string|null} –•–æ—Å—Ç–Ω–µ–π–º –∏–ª–∏ null
 */
function getDomainFromUrl(url) {
  try {
    const parsed = new URL(url);
    if (['chrome:', 'edge:', 'about:', '', 'blob:'].includes(parsed.protocol)) {
      return null;
    }
    return parsed.hostname;
  } catch {
    return null;
  }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
 * @param {string[]} blacklist - –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
 */
function renderBlockedList(blacklist) {
  const list = document.getElementById('blockedList');
  if (!list) return;

  const sorted = [...blacklist].sort((a, b) =>
    currentSortAsc ? a.localeCompare(b) : b.localeCompare(a)
  );

  list.innerHTML = '';

  if (sorted.length === 0) {
    const empty = document.createElement('li');
    empty.className = 'empty';
    empty.setAttribute('role', 'listitem');
    empty.textContent = i18n.empty_list || '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç';
    list.appendChild(empty);
    return;
  }

  const query = document.getElementById('searchInput')?.value.trim().toLowerCase() || '';

  sorted.forEach((domain) => {
    const li = document.createElement('li');
    li.setAttribute('role', 'listitem');

    if (domain === currentTabDomain) {
      li.classList.add('current-domain');
      li.title = i18n.current_site || '–¢–µ–∫—É—â–∏–π —Å–∞–π—Ç';
    }

    const span = document.createElement('span');
    if (query && domain.toLowerCase().includes(query)) {
      const idx = domain.toLowerCase().indexOf(query);
      const before = escapeHtml(domain.slice(0, idx));
      const match = escapeHtml(domain.slice(idx, idx + query.length));
      const after = escapeHtml(domain.slice(idx + query.length));
      span.innerHTML = `${before}<strong>${match}</strong>${after}`;
    } else {
      span.textContent = domain;
    }

    const btn = document.createElement('button');
    btn.textContent = `üóë ${i18n.delete_domain || '–£–¥–∞–ª–∏—Ç—å'}`;
    btn.classList.add('danger');
    btn.setAttribute('aria-label', `${i18n.delete_domain || '–£–¥–∞–ª–∏—Ç—å'} ${domain}`);
    btn.onclick = () => {
      li.classList.add('fade-out');
      btn.disabled = true;
      setTimeout(() => {
        const updated = blacklist.filter((d) => d !== domain);
        chrome.storage.local.set({ blacklist: updated }, () => {
          chrome.runtime.sendMessage({ type: 'updateContextMenu' });
          chrome.runtime.sendMessage({ type: 'updatePopup' });

          const searchInput = document.getElementById('searchInput');
          const currentQuery = searchInput?.value.trim().toLowerCase() || '';
          const filtered = updated.filter(d => d.toLowerCase().includes(currentQuery));
          renderBlockedList(filtered);
          updateButtonStates(filtered);
        });
      }, 300);
    };

    li.appendChild(span);
    li.appendChild(btn);
    list.appendChild(li);
  });
}

/**
 * –î–µ–±–∞—É–Ω—Å –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
 * @param {Function} func - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞
 * @param {number} delay - –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {Function} –û–±—ë—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function debounce(func, delay) {
  let timeoutId;
  return function (...args) {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => func.apply(this, args), delay);
  };
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (toast)
 * @param {string} message - –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
function showToast(message) {
  const toast = document.createElement('div');
  toast.textContent = message;
  toast.className = 'toast';
  toast.setAttribute('aria-live', 'polite');
  document.body.appendChild(toast);
  toast.classList.add('fade-in');

  setTimeout(() => {
    toast.classList.add('fade-out');
    setTimeout(() => {
      if (toast.parentNode) toast.remove();
    }, 300);
  }, 2700);
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É popup-–æ–∫–Ω–∞
 */
function initializePopup() {
  chrome.tabs.query({ active: true, currentWindow: true }, tabs => {
    const tab = tabs[0];
    const domain = tab?.url ? getDomainFromUrl(tab.url) : null;

    const domainEl = document.getElementById('domain');
    const statusEl = document.getElementById('status');
    const toggleBtn = document.getElementById('toggleBtn');
    const actionSection = toggleBtn?.closest('section');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –±—Ä–∞—É–∑–µ—Ä–∞
    if (!domain || !tab?.url) {
      // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É —Å–∞–π—Ç—É
      if (domainEl) domainEl.style.display = 'none';
      if (statusEl) statusEl.style.display = 'none';
      if (actionSection) actionSection.style.display = 'none';

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
      const oldMsg = document.getElementById('internal-page-message');
      if (oldMsg) oldMsg.remove();

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const message = document.createElement('p');
      message.id = 'internal-page-message';
      message.textContent = i18n.internal_page || '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ';

      const main = document.querySelector('main');
      const firstHeader = document.querySelector('h2');
      if (main && firstHeader) {
        main.insertBefore(message, firstHeader);
      }

      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
      chrome.storage.local.get(['blacklist'], data => {
        const blacklist = data.blacklist || [];
        renderBlockedList(blacklist);
        updateButtonStates(blacklist);
      });

      return;
    }

    // === –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö –≤–Ω–µ—à–Ω–∏—Ö —Å–∞–π—Ç–æ–≤ ===
    currentTabDomain = domain;

    if (domainEl) {
      domainEl.textContent = `${i18n.site || '–°–∞–π—Ç'}: ${domain}`;
      domainEl.style.display = 'block';
    }

    chrome.storage.local.get(['blacklist'], data => {
      const blacklist = data.blacklist || [];
      const isBlocked = blacklist.includes(domain);

      if (statusEl) {
        const icon = isBlocked ? '‚õî' : '‚úÖ';
        const statusText = isBlocked
          ? i18n.js_blocked || '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
          : i18n.js_allowed || '–†–∞–∑—Ä–µ—à—ë–Ω';
        statusEl.innerHTML = `${icon} ${i18n.status || '–°—Ç–∞—Ç—É—Å'}: ${statusText}`;
        statusEl.title = isBlocked 
          ? (i18n.js_blocked_hint || 'JavaScript –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ —ç—Ç–æ–º —Å–∞–π—Ç–µ')
          : (i18n.js_allowed_hint || 'JavaScript —Ä–∞–∑—Ä–µ—à—ë–Ω –Ω–∞ —ç—Ç–æ–º —Å–∞–π—Ç–µ');
        
        statusEl.classList.remove('blocked', 'allowed', 'fade-out', 'fade-in');
        statusEl.classList.add(isBlocked ? 'blocked' : 'allowed');
        statusEl.style.display = 'block';
      }

      if (toggleBtn) {
        toggleBtn.textContent = isBlocked
          ? (i18n.toggle_allow || '–†–∞–∑—Ä–µ—à–∏—Ç—å JS')
          : (i18n.toggle_block || '–û—Ç–∫–ª—é—á–∏—Ç—å JS');
        toggleBtn.title = i18n.toggle_title || '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏';
        toggleBtn.classList.remove('allow', 'block');
        toggleBtn.classList.add(isBlocked ? 'block' : 'allow');
        toggleBtn.disabled = false;
        toggleBtn.style.display = 'block';

        toggleBtn.onclick = () => {
          toggleBtn.disabled = true;
          if (statusEl) {
            statusEl.classList.add('fade-out');
          }

          chrome.runtime.sendMessage(
            { 
              type: 'toggleBlock', 
              tabId: tab.id, 
              url: tab.url
            },
            () => {
              setTimeout(() => {
                window.close();
              }, 300);
            }
          );
        };
      }

      if (actionSection) {
        actionSection.style.display = 'block';
      }

      // –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
      const msg = document.getElementById('internal-page-message');
      if (msg) msg.remove();

      renderBlockedList(blacklist);
      updateButtonStates(blacklist);
    });
  });

  // === –ü–æ–∏—Å–∫ ===
  const searchInput = document.getElementById('searchInput');
  if (searchInput) {
    searchInput.oninput = debounce(e => {
      const query = e.target.value.toLowerCase();
      chrome.storage.local.get(['blacklist'], data => {
        const filtered = (data.blacklist || []).filter(d => d.toLowerCase().includes(query));
        renderBlockedList(filtered);
        updateButtonStates(filtered);
      });
    }, 300);
  }

  // === –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ===
  const sortBtn = document.getElementById('sortBtn');
  if (sortBtn) {
    sortBtn.onclick = () => {
      currentSortAsc = !currentSortAsc;
      sortBtn.textContent = currentSortAsc
        ? `üîº ${i18n.sort || '–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å'}`
        : `üîΩ ${i18n.sort || '–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å'}`;

      const query = document.getElementById('searchInput')?.value.trim().toLowerCase() || '';
      chrome.storage.local.get(['blacklist'], data => {
        let list = data.blacklist || [];
        if (query) list = list.filter(d => d.toLowerCase().includes(query));
        renderBlockedList(list);
        updateButtonStates(list);
      });
    };
  }

  // === –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ —Å–ø–∏—Å–∫–∞ ===
  const clearBtn = document.getElementById('clearAllBtn');
  if (clearBtn) {
    clearBtn.onclick = () => {
      if (confirm(i18n.confirm_clear_all || '–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫?')) {
        chrome.tabs.query({ active: true, currentWindow: true }, tabs => {
          const currentDomain = tabs[0] ? getDomainFromUrl(tabs[0].url) : null;
          chrome.storage.local.get(['blacklist'], data => {
            const wasBlocked = currentDomain && (data.blacklist || []).includes(currentDomain);

            chrome.storage.local.set({ blacklist: [] }, () => {
              renderBlockedList([]);
              updateButtonStates([]);
              chrome.runtime.sendMessage({ type: 'updateContextMenu' });
              chrome.runtime.sendMessage({ type: 'updatePopup' });

              if (wasBlocked && tabs[0]?.id) {
                chrome.tabs.reload(tabs[0].id, { bypassCache: true });
              }
            });
          });
        });
      }
    };
  }

  // === –≠–∫—Å–ø–æ—Ä—Ç ===
  const exportBtn = document.getElementById('exportBtn');
  if (exportBtn) {
    exportBtn.onclick = () => {
      chrome.storage.local.get(['blacklist'], data => {
        const json = JSON.stringify(data.blacklist || [], null, 2);
        const blob = new Blob([json], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        chrome.downloads.download({
          url,
          filename: 'blacklist.json',
          saveAs: true
        }, () => {
          URL.revokeObjectURL(url);
          showToast(i18n.export_started || '–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—á–∞—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–∫–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        });
      });
    };
  }

  // === –ò–º–ø–æ—Ä—Ç ===
  const importBtn = document.getElementById('importBtn');
  const importFile = document.getElementById('importFile');
  if (importBtn && importFile) {
    importBtn.onclick = () => importFile.click();

    importFile.onchange = e => {
      const file = e.target.files?.[0];
      if (!file) return;

      const reader = new FileReader();
      reader.onload = () => {
        try {
          const data = JSON.parse(reader.result);
          if (!Array.isArray(data)) throw new Error(i18n.import_error_format || 'Expected a JSON array');

          // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
          const validDomains = [];
          const invalidCount = 0;

          for (const item of data) {
            if (typeof item === 'string' && isValidHost(item)) {
              validDomains.push(item.trim().toLowerCase());
            }
            // –ò–Ω–∞—á–µ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å, –Ω–æ –Ω–µ –±—É–¥–µ–º)
          }

          const cleaned = [...new Set(validDomains)]; // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏

          chrome.tabs.query({ active: true, currentWindow: true }, tabs => {
            const currentDomain = tabs[0] ? getDomainFromUrl(tabs[0].url) : null;
            const shouldReload = currentDomain && cleaned.includes(currentDomain.toLowerCase());

            chrome.storage.local.set({ blacklist: cleaned }, () => {
              chrome.runtime.sendMessage({ type: 'updatePopup' });
              renderBlockedList(cleaned);
              updateButtonStates(cleaned);

              if (shouldReload && tabs[0]?.id) {
                chrome.tabs.reload(tabs[0].id, { bypassCache: true });
              }

              const msg = (i18n.import_success || 'Imported domains: {count}')
                .replace('{count}', cleaned.length);
              showToast(msg);

              // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–∫–∞–∂–µ–º, —Å–∫–æ–ª—å–∫–æ –±—ã–ª–æ –æ—Ç–±—Ä–æ—à–µ–Ω–æ
              const invalid = data.length - validDomains.length;
              if (invalid > 0) {
                const warnMsg = `${i18n.import_invalid_skipped || 'Skipped invalid entries'}: ${invalid}`;
                showToast(warnMsg);
              }
            });
          });
        } catch (err) {
          showToast(`${i18n.import_error || 'Import error:'} ${err.message}`);
        }
      };
      reader.readAsText(file);
    };
  }

  // === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ popup –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é ===
  chrome.runtime.onMessage.addListener(message => {
    if (message.type === 'refreshPopup') {
      location.reload();
    }
  });

  // –§–æ–∫—É—Å –Ω–∞ –ø–æ–∏—Å–∫ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ (–µ—Å–ª–∏ –ø–æ–ª–µ –≤–∏–¥–∏–º–æ)
  if (searchInput) searchInput.focus();
}

// --- –ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM ---
document.addEventListener('DOMContentLoaded', () => {
  chrome.storage.local.get(['lang'], data => {
    const userLang = data.lang || navigator.language.slice(0, 2);
    const finalLang = ['ru', 'en'].includes(userLang) ? userLang : 'ru';
    loadLanguage(finalLang);
  });
});
